# ============================================
# üöö –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—Ç—ã“õ –∫–æ–º–ø–∞–Ω–∏—è –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ–Ω K-Means –∂”ô–Ω–µ –∏–µ—Ä–∞—Ä—Ö–∏—è–ª—ã“õ –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—É
# ============================================

# “ö–∞–∂–µ—Ç—Ç—ñ –∫—ñ—Ç–∞–ø—Ö–∞–Ω–∞–ª–∞—Ä
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans, AgglomerativeClustering
from sklearn.metrics import pairwise_distances_argmin
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.preprocessing import StandardScaler

# --------------------------------------------
# 1. –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–∞—Å–∞—É –∂”ô–Ω–µ –∂“Ø–∫—Ç–µ—É
# --------------------------------------------
np.random.seed(42)

# “Æ—à –∫–ª–∞—Å—Ç–µ—Ä “Ø—à—ñ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä
clusters = {
    'small': {'size': 100, 'distance_range': (50, 200), 'vehicles': (1, 4)},
    'medium': {'size': 100, 'distance_range': (200, 400), 'vehicles': (4, 8)},
    'large': {'size': 100, 'distance_range': (400, 600), 'vehicles': (8, 15)}
}

data = []
for cluster, params in clusters.items():
    for i in range(params['size']):
        distance = np.random.randint(params['distance_range'][0], params['distance_range'][1])
        delivery_time = int(distance * 0.15 + np.random.normal(10, 5))
        vehicles = np.random.randint(params['vehicles'][0], params['vehicles'][1])
        employees = vehicles + np.random.randint(2, 5)
        volume = int(distance * 0.4 + np.random.normal(20, 10))
        fuel = int(distance * 0.15 + np.random.normal(5, 3))
        maintenance = int(vehicles * 200 + np.random.normal(100, 50))
        revenue = int(distance * 18 + np.random.normal(500, 200))
        
        on_time_rate = max(70, min(99, 100 - distance * 0.03 + np.random.normal(5, 3)))
        satisfaction = max(65, min(98, on_time_rate - np.random.normal(5, 2)))
        
        data.append([
            distance, delivery_time, vehicles, employees, volume, 
            fuel, maintenance, revenue, satisfaction, on_time_rate
        ])

# DataFrame –∂–∞—Å–∞—É
columns = [
    'distance_km', 'delivery_time_hours', 'vehicle_count', 'employee_count',
    'package_volume_m3', 'fuel_consumption_l', 'maintenance_cost', 
    'freight_revenue', 'customer_satisfaction', 'on_time_delivery_rate'
]

data = pd.DataFrame(data, columns=columns)
print("üîπ –ê–ª“ì–∞—à“õ—ã 5 –∂–æ–ª:\n", data.head())

# --------------------------------------------
# 2. –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –º–∞—Å—à—Ç–∞–±—Ç–∞—É
# --------------------------------------------
scaler = StandardScaler()
scaled_data = scaler.fit_transform(data)
print(f"\nüîπ –ú–∞—Å—à—Ç–∞–±—Ç–∞–ª“ì–∞–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä ”©–ª—à–µ–º—ñ: {scaled_data.shape}")

# --------------------------------------------
# 3. K-Means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è—Å—ã
# --------------------------------------------
k_means = KMeans(init='k-means++', n_clusters=3, n_init=15, random_state=42)
k_means.fit(scaled_data)

k_means_cluster_centers = k_means.cluster_centers_
k_means_labels = pairwise_distances_argmin(scaled_data, k_means_cluster_centers)

print("\nüîπ –ö–ª–∞—Å—Ç–µ—Ä –æ—Ä—Ç–∞–ª—ã“õ—Ç–∞—Ä—ã:\n", k_means_cluster_centers)

# --------------------------------------------
# 4. –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É (–∂“±–ø—Ç–∞—Å—Ç—ã—Ä—É —Ç“Ø—Ä—ñ–Ω–¥–µ)
# --------------------------------------------
f, ax = plt.subplots(1, 3, figsize=(18, 5))
colors = ['#4EACC5', '#FF9C34', '#4E9A06']

# –ö–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä–¥—ñ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–ª–∞—É ”ô—Ä—Ç“Ø—Ä–ª—ñ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–ª–∞—Ä–¥–∞
feature_pairs = [
    (0, 1),   # distance_km vs delivery_time_hours
    (4, 5),   # package_volume_m3 vs fuel_consumption_l
    (7, 9)    # freight_revenue vs on_time_delivery_rate
]

feature_names = [
    ('“ö–∞—à—ã“õ—Ç—ã“õ (–∫–º)', '–ñ–µ—Ç–∫—ñ–∑—É —É–∞“õ—ã—Ç—ã (—Å–∞“ì)'),
    ('–ñ“Ø–∫ –∫”©–ª–µ–º—ñ (–º¬≥)', '–û—Ç—ã–Ω —à—ã“ì—ã–Ω—ã (–ª)'),
    ('–¢–∞–±—ã—Å', '–£–∞“õ—ã—Ç—Ç—ã–ª—ã“õ (%)')
]

for i in range(3):
    my_members = k_means_labels == i
    cluster_center = k_means_cluster_centers[i]
    
    for j, (idx1, idx2) in enumerate(feature_pairs):
        ax[j].scatter(scaled_data[my_members, idx1], scaled_data[my_members, idx2], 
                     c=colors[i], alpha=0.7, s=40, label=f'–ö–ª–∞—Å—Ç–µ—Ä {i+1}')
        ax[j].scatter(cluster_center[idx1], cluster_center[idx2], 
                     c=colors[i], marker='x', s=200, linewidth=3, label=f'–û—Ä—Ç–∞–ª—ã“õ {i+1}')
        
        ax[j].set_xlabel(feature_names[j][0])
        ax[j].set_ylabel(feature_names[j][1])
        ax[j].legend()
        ax[j].grid(True, alpha=0.3)

plt.suptitle('üöö K-Means –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—Ç—ã“õ –∫–æ–º–ø–∞–Ω–∏—è)')
plt.tight_layout()
plt.show()

# --------------------------------------------
# 5. –®—ã–Ω—Ç–∞“õ (–ª–æ–∫—Ç—è) ”ô–¥—ñ—Å—ñ –∞—Ä“õ—ã–ª—ã –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä —Å–∞–Ω—ã–Ω –∞–Ω—ã“õ—Ç–∞—É
# --------------------------------------------
inertia_values = []

for n_clusters in range(1, 11):
    k_means = KMeans(init='k-means++', n_clusters=n_clusters, n_init=15, random_state=42)
    k_means.fit(scaled_data)
    inertia_values.append(k_means.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia_values, marker='o', linewidth=2, markersize=8)
plt.title('üìà –®—ã–Ω—Ç–∞“õ ”ô–¥—ñ—Å—ñ - –û“£—Ç–∞–π–ª—ã –∫–ª–∞—Å—Ç–µ—Ä —Å–∞–Ω—ã–Ω –∞–Ω—ã“õ—Ç–∞—É')
plt.xlabel('–ö–ª–∞—Å—Ç–µ—Ä —Å–∞–Ω—ã')
plt.ylabel('–ò–Ω–µ—Ä—Ü–∏—è')
plt.grid(True, alpha=0.3)
plt.xticks(range(1, 11))
plt.show()

# --------------------------------------------
# 6. –ò–µ—Ä–∞—Ä—Ö–∏—è–ª—ã“õ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è
# --------------------------------------------
hier = AgglomerativeClustering(n_clusters=3, linkage='ward')
hier_labels = hier.fit_predict(scaled_data)

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
f, ax = plt.subplots(1, 3, figsize=(18, 5))

for i in range(3):
    my_members = hier_labels == i
    
    for j, (idx1, idx2) in enumerate(feature_pairs):
        ax[j].scatter(scaled_data[my_members, idx1], scaled_data[my_members, idx2], 
                     c=colors[i], alpha=0.7, s=40, label=f'–ö–ª–∞—Å—Ç–µ—Ä {i+1}')
        
        ax[j].set_xlabel(feature_names[j][0])
        ax[j].set_ylabel(feature_names[j][1])
        ax[j].legend()
        ax[j].grid(True, alpha=0.3)

plt.suptitle('üåø –ò–µ—Ä–∞—Ä—Ö–∏—è–ª—ã“õ –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—É –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä—ñ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—Ç—ã“õ –∫–æ–º–ø–∞–Ω–∏—è)')
plt.tight_layout()
plt.show()

# --------------------------------------------
# 7. –î–µ–Ω–¥–æ–≥—Ä–∞–º–º–∞ “õ“±—Ä—É
# --------------------------------------------
Z = linkage(scaled_data, method='ward')
plt.figure(figsize=(12, 8))
dendrogram(Z, truncate_mode='lastp', p=12, leaf_rotation=45, leaf_font_size=10)
plt.title('üå≥ –î–µ–Ω–¥–æ–≥—Ä–∞–º–º–∞ - –ò–µ—Ä–∞—Ä—Ö–∏—è–ª—ã“õ –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—É')
plt.xlabel('–î–µ—Ä–µ–∫ –Ω“Ø–∫—Ç–µ–ª–µ—Ä—ñ–Ω—ñ“£ –∏–Ω–¥–µ–∫—Å—ñ')
plt.ylabel('“ö–∞—à—ã“õ—Ç—ã“õ')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

# --------------------------------------------
# 8. –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Å–∞–ª—ã—Å—Ç—ã—Ä—É –∂”ô–Ω–µ —Ç–∞–ª–¥–∞—É
# --------------------------------------------
print("\n" + "="*50)
print("üìä –ö–õ–ê–°–¢–ï–†–õ–ï–£ –ù”ò–¢–ò–ñ–ï–õ–ï–†–Ü–ù –¢–ê–õ–î–ê–£")
print("="*50)

# –ö–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
data['kmeans_cluster'] = k_means_labels
data['hierarchical_cluster'] = hier_labels

print("\nüîπ K-Means –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä—ñ –±–æ–π—ã–Ω—à–∞ –æ—Ä—Ç–∞—à–∞ –º”ô–Ω–¥–µ—Ä:")
kmeans_stats = data.groupby('kmeans_cluster').agg({
    'distance_km': 'mean',
    'freight_revenue': 'mean', 
    'customer_satisfaction': 'mean',
    'vehicle_count': 'mean'
}).round(2)

print(kmeans_stats)

print("\nüîπ –ò–µ—Ä–∞—Ä—Ö–∏—è–ª—ã“õ –∫–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä –±–æ–π—ã–Ω—à–∞ –æ—Ä—Ç–∞—à–∞ –º”ô–Ω–¥–µ—Ä:")
hier_stats = data.groupby('hierarchical_cluster').agg({
    'distance_km': 'mean',
    'freight_revenue': 'mean',
    'customer_satisfaction': 'mean', 
    'vehicle_count': 'mean'
}).round(2)

print(hier_stats)

# --------------------------------------------
# 9. –ö–ª–∞—Å—Ç–µ—Ä–ª–µ—Ä–¥—ñ —Å–∏–ø–∞—Ç—Ç–∞—É
# --------------------------------------------
print("\n" + "="*50)
print("üéØ –ö–õ–ê–°–¢–ï–†–õ–ï–†–î–Ü“¢ –°–ò–ü–ê–¢–¢–ê–ú–ê–°–´")
print("="*50)

cluster_descriptions = {
    0: "üöõ “Æ–ª–∫–µ–Ω —Ç–∞—Å—ã–º–∞–ª–¥–∞—É–ª–∞—Ä - “∞–∑—ã–Ω “õ–∞—à—ã“õ—Ç—ã“õ, –∂–æ“ì–∞—Ä—ã —Ç–∞–±—ã—Å, —Ç”©–º–µ–Ω “õ–∞–Ω–∞“ì–∞—Ç—Ç–∞–Ω—É",
    1: "üöö –û—Ä—Ç–∞—à–∞ —Ç–∞—Å—ã–º–∞–ª–¥–∞—É–ª–∞—Ä - –û—Ä—Ç–∞—à–∞ “õ–∞—à—ã“õ—Ç—ã“õ, —Ç“±—Ä–∞“õ—Ç—ã —Ç–∞–±—ã—Å", 
    2: "üöó –ö—ñ—à—ñ —Ç–∞—Å—ã–º–∞–ª–¥–∞—É–ª–∞—Ä - “ö—ã—Å“õ–∞ “õ–∞—à—ã“õ—Ç—ã“õ, —Ç”©–º–µ–Ω —Ç–∞–±—ã—Å, –∂–æ“ì–∞—Ä—ã “õ–∞–Ω–∞“ì–∞—Ç—Ç–∞–Ω—É"
}

for cluster_num in range(3):
    cluster_data = data[data['kmeans_cluster'] == cluster_num]
    print(f"\nüî∏ {cluster_descriptions[cluster_num]}:")
    print(f"   - –ñ–∞–∑–±–∞–ª–∞—Ä —Å–∞–Ω—ã: {len(cluster_data)}")
    print(f"   - –û—Ä—Ç–∞—à–∞ “õ–∞—à—ã“õ—Ç—ã“õ: {cluster_data['distance_km'].mean():.1f} –∫–º")
    print(f"   - –û—Ä—Ç–∞—à–∞ —Ç–∞–±—ã—Å: {cluster_data['freight_revenue'].mean():.0f}")
    print(f"   - –û—Ä—Ç–∞—à–∞ “õ–∞–Ω–∞“ì–∞—Ç—Ç–∞–Ω—É: {cluster_data['customer_satisfaction'].mean():.1f}%")
    print(f"   - –û—Ä—Ç–∞—à–∞ –∫”©–ª—ñ–∫ —Å–∞–Ω—ã: {cluster_data['vehicle_count'].mean():.1f}")

print("\n" + "="*50)
print("‚úÖ –ö–õ–ê–°–¢–ï–†–õ–ï–£ –ê–Ø“ö–¢–ê–õ–î–´!")
print("="*50)
